# Functional Requirements Document (FRD)
## 1. Document Information
- **Document Title**: Functional Requirements Document for E-Commerce API
- **Version**: 1.0
- **Date**: October 27, 2025
- **Author**: Grok (xAI Assistant)
- **Project**: Simple E-Commerce API with Admin and Customer Roles
- **Description**: This document outlines the functional requirements for a RESTful API built
with FastAPI, MongoDB, and JWT authentication. The API supports user registration/login,
product CRUD operations (admin-only for create/update/delete), and order management
with role-based access control.
## 2. Introduction
### 2.1 Purpose
This FRD defines the core functionalities required for the E-Commerce API to enable:
- User authentication and authorization (admin and customer roles).
- Product catalog management.
- Order placement and tracking with inventory control.
The system ensures secure, scalable operations for a basic e-commerce workflow, including
stock deduction during order creation and atomic updates to prevent overselling.
### 2.2 Scope
- **In Scope**:
- User registration, login, and role-based access.
- Public product browsing.
- Admin-exclusive product management.
- Customer order creation and viewing.
- Admin order status updates.
- Basic health checks and data seeding.
- **Out of Scope**:
- Payment integration.
- Advanced search/filtering for products/orders.
- Email notifications.
- Multi-tenant support.
- File uploads (e.g., product images).
### 2.3 Assumptions and Dependencies
- MongoDB is available at the configured URI (default:
`mongodb://localhost:27017/ecommerce-python`).
- Environment variables (e.g., `MONGO_URI`, `JWT_SECRET`) are set via `.env`.
- API runs on port 8000 via Uvicorn.
- No external services beyond MongoDB.
## 3. Functional Requirements
Requirements are categorized by module. Each includes:
- **ID**: Unique identifier (e.g., FR-USER-001).
- **Description**: High-level functionality.
- **Actors**: Who performs the action (Admin, Customer, Public).
- **Preconditions**: Required state.
- **Postconditions**: Expected outcome.
- **Endpoints**: Relevant API paths (from OpenAPI spec).
### 3.1 User Management
| ID | Description | Actors | Preconditions
| Postconditions | Endpoints |
|-------------|-----------------------------------------------------------------------------|------------|------------------
--------------|--------------------------------------------------------------------------------|---------------------------
-|
| FR-USER-001 | Register a new user with username, email, password, and role (default:
customer). Validate uniqueness and role. | Public | None | User created in
DB with hashed password; returns user details (no password). | POST /auth/register |
| FR-USER-002 | Login with username/password; issue JWT access token (expires in 30
minutes). | Public | Valid credentials | Token returned; invalid creds return 401.
| POST /auth/login |
| FR-USER-003 | Validate JWT token and retrieve current user details for protected routes.
| Authenticated | Valid token in Authorization header | User object injected into route;
invalid/expired token returns 401. | N/A (Dependency) |
### 3.2 Product Management
| ID | Description | Actors | Preconditions
| Postconditions | Endpoints |
|-------------|-----------------------------------------------------------------------------|------------|------------------
--------------|--------------------------------------------------------------------------------|---------------------------
-|
| FR-PROD-001 | List all products with pagination (skip/limit). | Public |
None | Returns list of products (name, description, price, stock).
| GET /products |
| FR-PROD-002 | Retrieve a specific product by ID. | Public |
Valid ObjectId | Returns product details; invalid ID returns 400, not found returns
404. | GET /products/{product_id}|
| FR-PROD-003 | Create a new product (admin only). Validate price (>0) and stock (>=0). |
Admin | Valid JWT (admin role) | Product inserted with timestamp; returns created
product. | POST /products |
| FR-PROD-004 | Update a product partially (admin only). Only update provided fields. |
Admin | Valid JWT (admin role), product exists | Updated fields saved with timestamp; no
fields returns 400. | PUT /products/{product_id}|
| FR-PROD-005 | Delete a product (admin only). | Admin |
Valid JWT (admin role), product exists | Product removed; not found returns 404.
| DELETE /products/{product_id} |
### 3.3 Order Management
| ID | Description | Actors | Preconditions
| Postconditions | Endpoints |
|-------------|-----------------------------------------------------------------------------|------------|------------------
--------------|--------------------------------------------------------------------------------|---------------------------
-|
| FR-ORDER-001| Create an order with product IDs and quantities (customer only). Validate
stock, calculate total, deduct stock atomically with rollback on failure. | Customer | Valid
JWT (customer role), sufficient stock | Order inserted with "pending" status and timestamp;
stock updated; returns order details. | POST /orders |
| FR-ORDER-002| List orders: all for admin, customer's own for customer (with pagination). |
Admin/Customer | Valid JWT | Returns list of orders sorted by creation date
(desc). | GET /orders |
| FR-ORDER-003| Retrieve a specific order by ID: own for customer, any for admin. |
Admin/Customer | Valid JWT, access permitted | Returns order details; unauthorized
returns 403, not found returns 404. | GET /orders/{order_id} |
| FR-ORDER-004| Update order status (admin only). Valid statuses: pending, processing,
shipped, delivered, cancelled. | Admin | Valid JWT (admin role), order exists | Status
updated with timestamp; returns updated order. | PATCH
/orders/{order_id}/status |
### 3.4 System Utilities
| ID | Description | Actors | Preconditions
| Postconditions | Endpoints |
|-------------|-----------------------------------------------------------------------------|------------|------------------
--------------|--------------------------------------------------------------------------------|---------------------------
-|
| FR-UTIL-001 | Health check endpoint. | Public | None
| Returns {"status": "healthy", "timestamp": ISO}. | GET /health |
| FR-UTIL-002 | On startup: Seed sample products if DB empty; create indexes for
performance.| System | MongoDB connected | Indexes on username/email
(users), name (products), customer_id/created_at (orders); 3 sample products inserted. | N/A
(Event) |
## 4. Non-Functional Requirements
- **Security**: JWT for auth (HS256 algorithm); bcrypt for passwords; role-based access
control (RBAC).
- **Performance**: Pagination for lists (default limit: 100); MongoDB indexes for queries.
- **Reliability**: Atomic stock updates with rollback; error handling for concurrent orders.
- **Scalability**: Async operations via Motor (MongoDB driver); stateless API.
- **Validation**: Pydantic models enforce field constraints (e.g., price > 0, quantity > 0);
ObjectId validation.
- **Logging**: Basic console prints (e.g., seeding); extendable for production.
- **API Documentation**: Auto-generated OpenAPI spec at /docs (Swagger UI).
## 5. Data Models
### 5.1 Users (MongoDB Collection: users)
- `_id`: ObjectId (auto-generated)
- `username`: str (unique, 3-50 chars)
- `email`: str (unique, EmailStr format)
- `password`: str (hashed)
- `role`: str ("admin" or "customer")
- `created_at`: datetime (UTC)
### 5.2 Products (MongoDB Collection: products)
- `_id`: ObjectId (auto-generated)
- `name`: str (1-200 chars)
- `description`: str (1-1000 chars)
- `price`: float (rounded to 2 decimals, >0)
- `stock`: int (>=0)
- `created_at`: datetime (UTC)
- `updated_at`: datetime (UTC, on updates)
### 5.3 Orders (MongoDB Collection: orders)
- `_id`: ObjectId (auto-generated)
- `customer_id`: str (user _id)
- `products`: List[dict] ({product_id, product_name, quantity, price, subtotal})
- `total`: float (rounded to 2 decimals)
- `status`: str (pending|processing|shipped|delivered|cancelled)
- `created_at`: datetime (UTC)
- `updated_at`: datetime (UTC, on status updates)
## 6. Error Handling
- **HTTP Status Codes**:
- 200/201: Success.
- 400: Validation errors (e.g., invalid ID, insufficient stock).
- 401: Unauthorized (invalid token/creds).
- 403: Forbidden (role mismatch).
- 404: Not found.
- 422: Pydantic validation failures.
- Custom exceptions via HTTPException.
## 7. Testing Considerations
- **Unit Tests**: Validate models, password hashing, JWT creation.
- **Integration Tests**: End-to-end flows (e.g., register → login → create order → update
status).
- **Edge Cases**: Concurrent orders, stock exhaustion, invalid inputs.
## 8. Appendices
### 8.1 OpenAPI Spec
The provided OpenAPI 3.1.0 JSON defines the API schema, including request/response
models and security schemes. It can be used to generate client SDKs.
### 8.2 Deployment Notes
- Run with `uvicorn main:app --host 0.0.0.0 --port 8000` (assuming file named `main.py`).
- Set `.env` for production secrets.
- Sample users: Register an admin manually via /auth/register.
This FRD serves as a living document; update as requirements evolve. For implementation
details, refer to the source code.